from flask import Flask, render_template, request, redirect, session, flash
import mysql.connector
from werkzeug.security import generate_password_hash, check_password_hash
import os
from functools import wraps

app = Flask(__name__)
app.secret_key = os.environ.get('SECRET_KEY', 'your-super-secret-key-change-this-in-production')

app.config['PERMANENT_SESSION_LIFETIME'] = 3600
app.config['SESSION_COOKIE_SECURE'] = False
app.config['SESSION_COOKIE_HTTPONLY'] = True

def get_db():
    try:
        conn = mysql.connector.connect(
            host='localhost',
            user='root',
            password='',
            database='pro7'
        )
        return conn
    except mysql.connector.Error as err:
        flash(f"Error connecting to database: {err}", "error")
        return None

def require_login(f):
    @wraps(f)
    def decorated_function(*args, **kwargs):
        if 'user_id' not in session:
            flash("Please login to continue", "error")
            return redirect('/login')
        return f(*args, **kwargs)
    return decorated_function

@app.route('/')
def home():
    return redirect('/login')

@app.route('/register', methods=['GET', 'POST'])
def register():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        conn = get_db()
        if conn is None:
            return render_template('register.html')
        cursor = conn.cursor()
        try:
            hashed_password = generate_password_hash(password)
            cursor.execute("INSERT INTO users (username, password) VALUES (%s, %s)", (username, hashed_password))
            conn.commit()
            flash("Registration successful! Please login.", "success")
            return redirect('/login')
        except mysql.connector.errors.IntegrityError:
            flash("Username already exists", "error")
        except mysql.connector.Error as err:
            flash(f"Database error: {err}", "error")
        finally:
            cursor.close()
            conn.close()
    return render_template('register.html')

@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']

        conn = get_db()
        if conn is None:
            flash("Database connection error.", "error")
            return render_template('login.html')

        cursor = conn.cursor(dictionary=True)
        try:
            cursor.execute("SELECT * FROM users WHERE username = %s", (username,))
            user = cursor.fetchone()
            if user and check_password_hash(user['password'], password):
                session['username'] = user['username']
                session['user_id'] = user['id']
                log_user_action(user['id'], "login")
                flash("Login successful!", "success")
                return redirect('/dashboard')
            else:
                flash("Incorrect username or password", "error")
        except mysql.connector.Error as err:
            flash(f"Database error: {err}", "error")
        finally:
            cursor.close()
            conn.close()
    return render_template('login.html')

@app.route('/select_symptom', methods=['POST'])
@require_login
def select_symptom():
    symptom_type_id = request.form.get('symptom_id')
    session['symptom_type_id'] = int(symptom_type_id)

    user_id = session['user_id']

    # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏•‡∏á symptoms
    conn = get_db()
    cursor = conn.cursor()
    cursor.execute("INSERT INTO symptoms (user_id, symptom_type_id) VALUES (%s, %s)", (user_id, symptom_type_id))
    conn.commit()

    # ‚úÖ log_question: ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏≠‡∏∞‡πÑ‡∏£
    cursor.execute("SELECT name, ask_has_fever, has_fever_logic, skip_severity FROM symptom_types WHERE id = %s", (symptom_type_id,))
    row = cursor.fetchone()

    if not row:
        cursor.close()
        conn.close()
        flash("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö", "error")
        return redirect('/dashboard')

    symptom_name, ask_has_fever, has_fever_logic, skip_severity = row
    cursor.close()
    conn.close()

    # ‚úÖ Flow: ‡∏ñ‡∏≤‡∏°‡∏°‡∏µ‡πÑ‡∏Ç‡πâ ‚Üí ‡∏ñ‡∏≤‡∏°‡∏õ‡∏ß‡∏î‡∏Å‡∏•‡πâ‡∏≤‡∏°‡πÄ‡∏ô‡∏∑‡πâ‡∏≠ ‚Üí ‡∏Ç‡πâ‡∏≤‡∏° severity ‚Üí ‡∏ñ‡∏≤‡∏°‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡∏£‡∏£‡∏†‡πå
    if ask_has_fever:
        return redirect('/question_has_fever')
    elif has_fever_logic:
        return redirect('/question_fever')
    elif skip_severity:
        return redirect('/question_pregnant')
    else:
        return redirect('/severity')

@app.route('/dashboard')
@require_login
def dashboard():
    conn = get_db()
    if conn is None:
        return redirect('/login')
    cursor = conn.cursor(dictionary=True)
    try:
        cursor.execute("SELECT * FROM symptom_types")
        symptoms = cursor.fetchall()
        return render_template('first.html', symptoms=symptoms)
    except mysql.connector.Error as err:
        flash(f"Database error: {err}", "error")
        return redirect('/login')
    finally:
        cursor.close()
        conn.close()

@app.route('/logout')
def logout():
    if 'user_id' in session:
        log_user_action(session['user_id'], "logout")
    session.clear()
    flash("Logout successful!", "success")
    return redirect('/login')

#‡∏ñ‡∏≤‡∏°‡∏ß‡πà‡∏≤‡∏õ‡∏ß‡∏î‡∏Å‡∏•‡πâ‡∏≤‡∏°‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
@app.route('/question_fever', methods=['GET', 'POST'])
@require_login
def question_fever():
    if request.method == 'POST':
        muscle_pain = request.form.get('muscle_pain') == 'yes'
        session['muscle_pain'] = muscle_pain
        # ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡πà‡∏≤‡∏•‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á symptoms
        conn = get_db()
        cursor = conn.cursor()
        cursor.execute("""
            UPDATE symptoms 
            SET has_fever = %s 
            WHERE id = (
                SELECT id FROM (
                    SELECT id FROM symptoms 
                    WHERE user_id = %s 
                    ORDER BY id DESC LIMIT 1
                ) AS latest
            )
        """, (int(muscle_pain), session['user_id']))
        conn.commit()
        cursor.close()
        conn.close()

        if muscle_pain:
            return render_template('advise_doctor.html', reason="‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏õ‡∏ß‡∏î‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏¢‡∏Å‡∏•‡πâ‡∏≤‡∏°‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ö‡πÑ‡∏Ç‡πâ ‡∏≠‡∏≤‡∏à‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏Ç‡πâ‡∏´‡∏ß‡∏±‡∏î‡πÉ‡∏´‡∏ç‡πà ‡πÇ‡∏õ‡∏£‡∏î‡∏û‡∏ö‡πÅ‡∏û‡∏ó‡∏¢‡πå")
        else:
            return redirect('/question_pregnant')

    return render_template('fever_muscle.html')

# ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô log_user_action ‡∏Ñ‡∏á‡πÄ‡∏î‡∏¥‡∏°

def log_user_action(user_id, action):
    conn = get_db()
    if conn is None:
        return
    cursor = conn.cursor()
    cursor.execute("INSERT INTO user_logs (user_id, action) VALUES (%s, %s)", (user_id, action))
    conn.commit()
    cursor.close()
    conn.close()
    print(f"[log_user_action] user_id: {user_id}, action: {action}")

# ‚úÖ ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ô‡∏≥‡∏ß‡∏¥‡∏ò‡∏µ‡πÅ‡∏Å‡πâ‡∏à‡∏≤‡∏Å /submit_severity ‡πÑ‡∏õ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£ update ‡∏î‡πâ‡∏ß‡∏¢ ORDER BY ‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢

@app.route('/submit_severity', methods=['POST'])
def submit_severity():
    if 'user_id' not in session:
        return redirect('/login')

    severity = int(request.form.get('severity'))
    note = request.form.get('note')
    user_id = session.get('user_id')
    if not user_id:
        return redirect('/login')

    # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á DB
    conn = get_db()
    cursor = conn.cursor()
    cursor.execute("""
        UPDATE symptoms 
        SET severity = %s, severity_note = %s 
        WHERE id = (
            SELECT id FROM (
                SELECT id FROM symptoms 
                WHERE user_id = %s 
                ORDER BY id DESC LIMIT 1
            ) AS temp
        )
    """, (severity, note, user_id))
    conn.commit()
    cursor.close()
    conn.close()

    session['severity'] = severity  # üëà ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
    

    return redirect('/check_condition')  # üëà ‡∏™‡πà‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏õ‡∏ï‡πà‡∏≠

#‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏ß‡∏î‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 5 ‡∏à‡∏∞‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏û‡∏ö‡πÅ‡∏û‡∏ó‡∏¢‡πå
@app.route('/check_condition', methods=['GET', 'POST'])
def check_condition():
    if request.method == 'POST':
        severity = int(request.form.get('severity'))
        session['severity'] = severity
    else:
        severity = session.get('severity')

    if severity is None:
        return redirect('/severity')

    if severity >= 5:
        return render_template('advise_doctor.html', reason="‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏£‡∏∏‡∏ô‡πÅ‡∏£‡∏á")
    else:
        return redirect('/question_pregnant')

#‡∏ñ‡∏≤‡∏°‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ß‡πà‡∏≤‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡∏£‡∏£‡∏†‡πå‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
@app.route('/question_pregnant', methods=['GET', 'POST'])
@require_login
def question_pregnant():
    if request.method == 'POST':
        pregnant = request.form.get('pregnant')  # yes / no
        is_pregnant = pregnant == 'yes'
        session['is_pregnant'] = is_pregnant
        user_id = session.get('user_id')
        severity = session.get('severity')
        allergy = session.get('paracetamol_allergy', False)

        if severity is None:
            return redirect('/severity')  # ‡πÄ‡∏ú‡∏∑‡πà‡∏≠ session ‡∏´‡∏≤‡∏¢

        reason = ""
        medicine = ""

        if is_pregnant:
            medicine = "‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏û‡∏ö‡πÅ‡∏û‡∏ó‡∏¢‡πå"
            reason = "‡∏≠‡∏¢‡∏π‡πà‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡∏£‡∏£‡∏†‡πå"
            severity_note = f"{medicine} ({reason})"

            # ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï DB ‡∏î‡πâ‡∏ß‡∏¢ subquery ‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
            conn = get_db()
            cursor = conn.cursor()
            cursor.execute("""
                SELECT id FROM (
                    SELECT id FROM symptoms 
                    WHERE user_id = %s 
                    ORDER BY id DESC LIMIT 1
                ) AS temp
            """, (user_id,))
            result = cursor.fetchone()

            if result:
                symptom_id = result[0]
                cursor.execute("""
                    UPDATE symptoms
                    SET severity = %s,
                        severity_note = %s,
                        is_pregnant = %s,
                        paracetamol_allergy = %s
                    WHERE id = %s
                """, (
                    severity,
                    severity_note,
                    is_pregnant,
                    allergy,
                    symptom_id
                ))
                conn.commit()

            cursor.close()
            conn.close()

            log_user_action(user_id, "‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡∏£‡∏£‡∏†‡πå: ‡πÉ‡∏ä‡πà")

            return render_template('advise_doctor.html', reason=reason)

        else:
            log_user_action(user_id, "‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡∏£‡∏£‡∏†‡πå: ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà")
            return redirect('/question_allergy')

    return render_template('pregnant.html')


#‡∏ñ‡∏≤‡∏°‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ß‡πà‡∏≤‡πÅ‡∏û‡πâ‡∏¢‡∏≤‡∏°‡∏±‡πâ‡∏¢
@app.route('/question_allergy', methods=['GET', 'POST'])
@require_login
def question_allergy():
    if request.method == 'POST':
        # üü¢ ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å‡∏ü‡∏≠‡∏£‡πå‡∏°
        allergy = request.form.get('allergy')  # "yes" ‡∏´‡∏£‡∏∑‡∏≠ "no"
        is_allergy = allergy == 'yes'
        session['paracetamol_allergy'] = is_allergy
        user_id = session.get('user_id')
        severity = session.get('severity')
        is_pregnant = session.get('is_pregnant', False)
        symptom_type_id = session.get('symptom_type_id')

        # üîç ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£
        reason = ""
        medicine = ""

        # üîÅ ‡πÄ‡∏ä‡πá‡∏Ñ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡πÅ‡∏û‡πâ/‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡∏£‡∏£‡∏†‡πå
        if is_allergy:
            medicine = "‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏û‡∏ö‡πÅ‡∏û‡∏ó‡∏¢‡πå"
            reason = "‡πÅ‡∏û‡πâ‡∏¢‡∏≤‡∏û‡∏≤‡∏£‡∏≤‡πÄ‡∏ã‡∏ï‡∏≤‡∏°‡∏≠‡∏•"
        elif is_pregnant:
            medicine = "‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏û‡∏ö‡πÅ‡∏û‡∏ó‡∏¢‡πå"
            reason = "‡∏≠‡∏¢‡∏π‡πà‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡∏£‡∏£‡∏†‡πå"
        else:
            # ‚úÖ ‡∏î‡∏∂‡∏á‡∏¢‡∏≤‡∏à‡∏≤‡∏Å symptom_types
            conn = get_db()
            cursor = conn.cursor()
            cursor.execute("SELECT suggested_medicine FROM symptom_types WHERE id = %s", (symptom_type_id,))
            result = cursor.fetchone()
            if result:
                medicine = result[0]
                reason = ""
            else:
                medicine = "‡∏û‡∏≤‡∏£‡∏≤‡πÄ‡∏ã‡∏ï‡∏≤‡∏°‡∏≠‡∏• 500mg"
                reason = "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏≤‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö"
            cursor.close()
            conn.close()

        # ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏£‡∏∏‡∏õ
        severity_note = f"‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏¢‡∏≤: {medicine}"

        # ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á symptoms
        conn = get_db()
        cursor = conn.cursor()
        cursor.execute("""
            SELECT id FROM symptoms 
            WHERE user_id = %s 
            ORDER BY id DESC LIMIT 1
        """, (user_id,))
        result = cursor.fetchone()

        if result:
            symptom_id = result[0]
            cursor.execute("""
                UPDATE symptoms
                SET severity = %s,
                    severity_note = %s,
                    is_pregnant = %s,
                    paracetamol_allergy = %s
                WHERE id = %s
            """, (
                severity,
                severity_note,
                is_pregnant,
                is_allergy,
                symptom_id
            ))
            conn.commit()

        cursor.close()
        conn.close()

        # ‚úÖ ‡∏ï‡∏≠‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
        if medicine == "‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏û‡∏ö‡πÅ‡∏û‡∏ó‡∏¢‡πå":
            return render_template("advise_doctor.html", reason=reason)
        else:
            return render_template("recommend_result.html", medicine=medicine)

    return render_template("allergy.html")

#‡∏ñ‡∏≤‡∏°‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ß‡πà‡∏≤‡∏°‡∏µ‡πÑ‡∏Ç‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
@app.route('/question_has_fever', methods=['GET', 'POST'])
def question_has_fever():
    if request.method == 'POST':
        has_fever = request.form.get('has_fever') == 'yes'
        session['has_fever'] = has_fever
        if has_fever:
            return redirect('/question_fever')
        else:
            # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á symptoms
            conn = get_db()
            cursor = conn.cursor()
            cursor.execute("""
                UPDATE symptoms 
                SET has_fever = %s 
                WHERE user_id = %s 
                ORDER BY id DESC LIMIT 1
            """, (has_fever, session['user_id']))
            conn.commit()
            cursor.close()
            conn.close()

            return redirect('/severity')
    return render_template('question_has_fever.html')

#‡∏™‡∏£‡∏∏‡∏õ‡πÅ‡∏•‡∏∞‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏¢‡∏≤
@app.route('/recommend_medicine')
@require_login
def recommend_medicine():
    user_id = session.get('user_id')
    symptom_type_id = session.get('symptom_type_id')
    severity = session.get('severity',0)
    is_pregnant = session.get('is_pregnant', False)
    allergy = session.get('paracetamol_allergy', False)
    has_fever = session.get('has_fever', False)

    # üîç DEBUG: ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å session
    print("user_id:", user_id)
    print("symptom_type_id (from session):", symptom_type_id)

    conn = get_db()
    cursor = conn.cursor()

    # ‚úÖ ‡∏î‡∏∂‡∏á suggested_medicine
    try:
        cursor.execute("SELECT suggested_medicine FROM symptom_types WHERE id = %s", (symptom_type_id,))
        result = cursor.fetchone()

        # üîç DEBUG: ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏î‡∏∂‡∏á‡πÑ‡∏î‡πâ
        print("SQL Result:", result)

    except Exception as e:
        print("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ï‡∏≠‡∏ô SELECT:", e)
        result = None

    # ‚úÖ ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏¢‡∏≤
    if allergy or is_pregnant:
        medicine = "‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏û‡∏ö‡πÅ‡∏û‡∏ó‡∏¢‡πå"
        print("‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏: ‡πÅ‡∏û‡πâ‡∏¢‡∏≤ / ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡∏£‡∏£‡∏†‡πå")
    elif result:
        medicine = result[0]
        print("‡∏¢‡∏≤‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏à‡∏≤‡∏Å DB:", medicine)
    else:
        medicine = "‡∏û‡∏≤‡∏£‡∏≤‡πÄ‡∏ã‡∏ï‡∏≤‡∏°‡∏≠‡∏• 500mg"
        print("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡πÉ‡∏ô DB, fallback:", medicine)

    # ‚úÖ UPDATE symptoms ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
    cursor.execute("""
        UPDATE symptoms
        SET severity = %s,
            severity_note = %s,
            is_pregnant = %s,
            paracetamol_allergy = %s,
            has_fever = %s
        WHERE id = (
            SELECT id FROM (
                SELECT id FROM symptoms WHERE user_id = %s ORDER BY id DESC LIMIT 1
            ) AS latest
        )
    """, (severity,medicine, int(is_pregnant), int(allergy), int(has_fever), user_id))

    conn.commit()
    cursor.close()
    conn.close()
    # ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
    if allergy:
        extra = "‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏û‡πâ‡∏¢‡∏≤‡∏û‡∏≤‡∏£‡∏≤‡πÄ‡∏ã‡∏ï‡∏≤‡∏°‡∏≠‡∏• ‡∏Ñ‡∏ß‡∏£‡∏û‡∏ö‡πÅ‡∏û‡∏ó‡∏¢‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°"
    elif is_pregnant:
        extra = "‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏¢‡∏π‡πà‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡∏£‡∏£‡∏†‡πå ‡πÇ‡∏õ‡∏£‡∏î‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤‡πÅ‡∏û‡∏ó‡∏¢‡πå‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ‡∏¢‡∏≤"

    return render_template('recommend_result.html', medicine=medicine, extra=extra)


@app.route('/severity')
def severity():
    return render_template('severity.html')

if __name__ == '__main__':
    app.run(debug=True)

 